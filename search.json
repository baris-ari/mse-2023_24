[
  {
    "objectID": "index.html#welcome-to-mse-202324-a",
    "href": "index.html#welcome-to-mse-202324-a",
    "title": "Methods of Social Enquiry",
    "section": "Welcome to MSE (2023/24) A",
    "text": "Welcome to MSE (2023/24) A\nThis is the website of the Methods of Social Enquiry (PPLX7006).\nThe module has two in-person teaching components:\n\nThematic lectures (one-hour on Monday)\nApplied data analysis (two-hours on Thursday)\n\nAttendance is mandatory for all teaching sessions. If you cannot attend to any of the sessions, please make sure to submit an extenuating circumstances through eVision.\nWe will use this website for applied data analysis. The website is not a substitute for module Blackboard. We will use this site in conjunction with Blackboard."
  },
  {
    "objectID": "index.html#first-task-week-0",
    "href": "index.html#first-task-week-0",
    "title": "Methods of Social Enquiry",
    "section": "First Task (Week 0)",
    "text": "First Task (Week 0)\nOur very first task is to install R and R Studio on our laptops.\nPlease do this before coming to class on Thursday.\nR and R Studio are very powerful tools for analysing data and for creating high-quality documents. I prepared this website using R Studio. It is widely used both in academic research and in commercial enterprise. Learning the fundamentals of these powerful tools gives you an advantage in the job market (or for pursuing further studies such as PhD). They are free and open source.\nMake sure to install R first and then the R Studio.\n\nR can be installed here: https://cran.r-project.org/\nR Studio can be install here: https://posit.co/downloads/\n\nInstructions for installing R and R Studio are available in Appendix A of the Online Textbook Hands-on Programming with R."
  },
  {
    "objectID": "w01_Rbasics.html#objectives-for-week-1",
    "href": "w01_Rbasics.html#objectives-for-week-1",
    "title": "1  R Basics",
    "section": "1.1 Objectives for Week 1",
    "text": "1.1 Objectives for Week 1\n\nUse R as a calculator\nWrite and execute a command by using R Studio text editor\nSave your script\nUse the assignment operator to create objects\nUnderstand the difference between ‘string’ and ‘numerical’\nCreate a simple dataset"
  },
  {
    "objectID": "w01_Rbasics.html#use-r-as-a-calculator",
    "href": "w01_Rbasics.html#use-r-as-a-calculator",
    "title": "1  R Basics",
    "section": "1.2 Use R as a calculator",
    "text": "1.2 Use R as a calculator\nGo to the console pane and type a simple calculation.\n\n1 + 3\n#> [1] 4\n\nAs you can see, the output for 1 + 3 is 4, which is correct. We directly did a calculation using the console.\nIt would work but it is not a good approach. Do not write your code directly to the console. Instead, go to the top left pane and write your ‘code’ into the text editor. The calculation 1 + 3 here is your code.\n\n\n\n\n\nFigure 1.2: Our first calculation\n\n\n\n\n\nSave your script by file > save OR simply by ctrl/cmd + S"
  },
  {
    "objectID": "w01_Rbasics.html#assignment-operator-to-create-objects",
    "href": "w01_Rbasics.html#assignment-operator-to-create-objects",
    "title": "1  R Basics",
    "section": "1.3 Assignment operator to create objects",
    "text": "1.3 Assignment operator to create objects\nWe can create objects in R which store our data. For example, you would like to calculate your age. Current year (i.e., 2023) - your birth year gives your age.\nLet’s create an object which stores your year of birth. We are going to call it my_birth_year. Each R object must be one-word only, so I use _ instead of space. We could also have used a dot or dash.\n\n# This is a comment. \n# Characters after a hashtag are considered as comments by R. \n# They are not executed.\n# Use comments extensively to take notes \n# and to remind your future self of the work you did. \n\n# \"<-\" is the assignment operator\n# It basically symbolizes an arrow.\n\nmy_birth_year <- 1985\n\nNow the Environment should store an object called my_birth_year. When I run my_birth_year, R will display the information stored.\n\nmy_birth_year\n#> [1] 1985\n\nNote that R is case sensitive. If you mistype, such as My_birth_year, it will give you an error message.\n\nMy_birth_year\n#> Error in eval(expr, envir, enclos): object 'My_birth_year' not found\n\nWe can find your age by subtracting current year from my_birth_year.\n\n2023 - my_birth_year\n#> [1] 38\n\nWe typed 2023 manually. We might want to create another object called current_year. Try to do it yourself first as an exercise.\n\n\nReveal the code\ncurrent_year <- 2023\n\n\nYou can do operations using objects. For example, calculate your age using the objects current_year and my_birth_year. Store this in another object called my_age.\n\n\nReveal the code\nmy_age <- current_year - my_birth_year \n\n\nCheck if you did correctly.\n\nmy_age\n#> [1] 38\n\nYou can also write over an object.\n\ncurrent_year <- 2030\ncurrent_year\n#> [1] 2030\n\nThis would not change outputs previously created using the older version of the objects.\n\nmy_age\n#> [1] 38\n\nObviously, current yer is not 2030, so let’s correct it back.\n\ncurrent_year <- 2023"
  },
  {
    "objectID": "w01_Rbasics.html#numerical-and-string-objects",
    "href": "w01_Rbasics.html#numerical-and-string-objects",
    "title": "1  R Basics",
    "section": "1.4 Numerical and String objects",
    "text": "1.4 Numerical and String objects\nSo far, we stored numerical data. We can also have textual information, such as name of a person, or type of a medicine.\nCreate an object called my_name and store your name there.\n\nmy_name <- \"Baris\"\nmy_name\n#> [1] \"Baris\"\n\nAs you can see, R displays textual information within quotation (’’). Any information stored or displayed within '' is called string and refers to text.\nCreate an object called my_name_last and store your name there.\n\n\nReveal the code\nmy_name_last <- \"Ari\"\n\n\nObviously, you cannot make a calculation using words. It is nonsensical to subtract two words. You cannot do any calculation with words.\n\nmy_name_last - my_name\n#> Error in my_name_last - my_name: non-numeric argument to binary operator\n\nSometimes numerical information is stored as text. In that case, R will not consider it as a number. For example, see three objects below.\n\nnum1 <- 10\nnum2 <- 100\nnum3 <- \"1000\"\n\nnum1 and num2 are numerical values, but num3 is text. You cannot do any calculation with that.\n\nnum1\n#> [1] 10\n\nnum2\n#> [1] 100\n\nnum3\n#> [1] \"1000\"\n\nnum1 + num2\n#> [1] 110\n\nnum1 + num3\n#> Error in num1 + num3: non-numeric argument to binary operator"
  },
  {
    "objectID": "w01_Rbasics.html#create-a-simple-dataset",
    "href": "w01_Rbasics.html#create-a-simple-dataset",
    "title": "1  R Basics",
    "section": "1.5 Create a Simple Dataset",
    "text": "1.5 Create a Simple Dataset\nImagine that we have the names and birth years of a number of people. We cannot really hold each piece of information in a separate object. We would like to store them altogether in a single object, like a spreadsheet.\nLet’s start with names. We have five people:\n\nRishi Sunak\nLiz Truss\nBoris Johnson\nTheresa May\nDavid Cameron\n\nWe can store their full names in a single object using the combine function c.\n\nnames_pm <- c(\"Rishi Sunak\",\n              \"Liz Truss\",\n              \"Boris Johnson\",\n              \"Theresa May\",\n              \"David Cameron\",\n              \"Gordon Brown\",\n              \"Tony Blair\")\n\nNote that each PMs name is written within quotation and they are combined together with the function c(). Each item within c() is separated with a comma. Let’s see the object:\n\nnames_pm\n#> [1] \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\" \"Theresa May\"  \n#> [5] \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nGreat! We have the names of the last five UK PMs.\nYou may have realized that there are numbers in squared brackets in the beginning of each line.\nThese numbers refer to the order in the sequence. For example, “Rishi Sunak” is the first item whereas “David Cameron” is the fifth.\nYou can recall a particular item in the object using square brackets. Let’s print the first item in names_pm.\n\nnames_pm[1]\n#> [1] \"Rishi Sunak\"\n\nSimilarly, for the third item, you would use [3]:\n\nnames_pm[3]\n#> [1] \"Boris Johnson\"\n\nFind the fifth name in the object.\n\n\nReveal the code\n\nnames_pm[5]\n#> [1] \"David Cameron\"\n\n\nYou can add more than one number into the square brackets using the c() function. For example, who are the second and fourth names?\n\nnames_pm[c(2,4)]\n#> [1] \"Liz Truss\"   \"Theresa May\"\n\nNext, let’s write down their birth year. The order is important! You need to keep the same order with PMs.\n\nbirth_years <- c(1980, # Rishi Sunak\n                 1975, # Liz Truss\n                 1964, # Boris Johnson\n                 1956, # Theresa May\n                 1966, # David Cameron\n                 1951, # Gordon Brown\n                 1953  # Tony Blair)\n                 )\n\nCheck the object we just created.\n\nbirth_years\n#> [1] 1980 1975 1964 1956 1966 1951 1953\n\nLet’s put them together in a spreadsheet. What we would like to do is to vertically bind the two objects, which is called column bind and denoted with cbind.\n\ncbind(names_pm, birth_years)\n#>      names_pm        birth_years\n#> [1,] \"Rishi Sunak\"   \"1980\"     \n#> [2,] \"Liz Truss\"     \"1975\"     \n#> [3,] \"Boris Johnson\" \"1964\"     \n#> [4,] \"Theresa May\"   \"1956\"     \n#> [5,] \"David Cameron\" \"1966\"     \n#> [6,] \"Gordon Brown\"  \"1951\"     \n#> [7,] \"Tony Blair\"    \"1953\"\n\nPut this into an object.\n\nmy_data <- cbind(names_pm, birth_years)\n\nmy_data\n#>      names_pm        birth_years\n#> [1,] \"Rishi Sunak\"   \"1980\"     \n#> [2,] \"Liz Truss\"     \"1975\"     \n#> [3,] \"Boris Johnson\" \"1964\"     \n#> [4,] \"Theresa May\"   \"1956\"     \n#> [5,] \"David Cameron\" \"1966\"     \n#> [6,] \"Gordon Brown\"  \"1951\"     \n#> [7,] \"Tony Blair\"    \"1953\"\n\nNote that birth_years are stored as text, not numbers. I know this because they are within quotation marks.\nIt is customary to keep spreadsheets as something called “data frames” in R. This will not change our data, but makes further operations easier by unlocking some of the features of R.\n\nmy_data <- as.data.frame(my_data)\n\nmy_data\n#>        names_pm birth_years\n#> 1   Rishi Sunak        1980\n#> 2     Liz Truss        1975\n#> 3 Boris Johnson        1964\n#> 4   Theresa May        1956\n#> 5 David Cameron        1966\n#> 6  Gordon Brown        1951\n#> 7    Tony Blair        1953\n\nWe can take a better look at the dataset using View() function.\n\n\nView(my_data)\n\nColumns in a data frame are also called variables. We have two variables in the dataset:\n\nnames_pm : Name of the UK PM\nbirth_years: Birth year of the PM\n\nThere are a few ways to access a variable. A straightforward approach is to use the $ notation:\n\n# 'name of the data frame'$'name of the variable' \nmy_data$names_pm\n#> [1] \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\" \"Theresa May\"  \n#> [5] \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nNow it is your turn. Display the names variable.\n\n\nReveal the code\nmy_data$birth_years\n#> [1] \"1980\" \"1975\" \"1964\" \"1956\" \"1966\" \"1951\" \"1953\"\n\n\nYou can think this expression as a sentence in R. In plain English, this expression tells R to bring the variable names_pm within the data frame my_data. The symbol $ refers to the ‘within’ part of this sentence.\nJust like you can convey the same meaning using different sentence structures, there are different ways to do the same thing in R. This is because R is working exactly like a language: it is a language to communicate with the computer.\nAnother way is using the square brackets notation []. names_pm is the first column in the data frame. To get the variable, you could type the following.\n\nmy_data[,1]\n#> [1] \"Rishi Sunak\"   \"Liz Truss\"     \"Boris Johnson\" \"Theresa May\"  \n#> [5] \"David Cameron\" \"Gordon Brown\"  \"Tony Blair\"\n\nNote that we did not simply write my_data[1]. There is a comma: my_data[,1]\nIn a spreadsheet, we have two dimensions: rows and columns. By convention, rows are considered as the first dimension, and columns are considered as the second. This is why we had to use a comma to designate that we are interested in columns. If left the first dimension unspecified, which tells R to bring everything.\nIf you want to get the first row, you would type the following.\n\nmy_data[1,]\n#>      names_pm birth_years\n#> 1 Rishi Sunak        1980\n\nTry it yourself; get the fourth row.\n\n\nReveal the code\nmy_data[4,]\n#>      names_pm birth_years\n#> 4 Theresa May        1956\n\n\nLet’s put these together: you can tell R to bring a specific observation. For example, third row of second column.\n\nmy_data[3,2]\n#> [1] \"1964\"\n\nYou can also ask for multiple items by plugging in the combine function.\n\n# Third and fourth row of second column\nmy_data[c(3,4), 2]\n#> [1] \"1964\" \"1956\""
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Methods of Social Enquiry",
    "section": "",
    "text": "Welcome to MSE (2023/24)\nThis is the website of the Methods of Social Enquiry (PPLX7006).\nThe module has two in-person teaching components:\nAttendance is mandatory for all teaching sessions. If you cannot attend to any of the sessions, please make sure to submit an extenuating circumstances through eVision.\nWe will use this website for applied data analysis. The website is not a substitute for module Blackboard. We will use this site in conjunction with Blackboard."
  },
  {
    "objectID": "index.html#welcome-to-mse-202324",
    "href": "index.html#welcome-to-mse-202324",
    "title": "Methods of Social Enquiry",
    "section": "Welcome to MSE (2023/24)",
    "text": "Welcome to MSE (2023/24)\nThis is the website of the Methods of Social Enquiry (PPLX7006).\nThe module has two in-person teaching components:\n\nThematic lectures (one-hour on Monday)\nApplied data analysis (two-hours on Thursday)\n\nAttendance is mandatory for all teaching sessions. If you cannot attend to any of the sessions, please make sure to submit an extenuating circumstances through eVision.\nWe will use this website for applied data analysis. The website is not a substitute for module Blackboard. We will use this site in conjunction with Blackboard."
  }
]